/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  AppointmentTypeResponseDto,
  SpecialtyWithProviderResponseDto,
} from '.././types'

/**
 * @summary Lists the specialty's available appointment types.
 */
export type specialtyControllerListSpecialtyAppointmentTypesResponse = {
  data: AppointmentTypeResponseDto[]
  status: number
  headers: Headers
}

export const getSpecialtyControllerListSpecialtyAppointmentTypesUrl = (
  id: number,
) => {
  return `http://localhost:3001/specialty/${id}/appointment-types`
}

export const specialtyControllerListSpecialtyAppointmentTypes = async (
  id: number,
  options?: RequestInit,
): Promise<specialtyControllerListSpecialtyAppointmentTypesResponse> => {
  const res = await fetch(
    getSpecialtyControllerListSpecialtyAppointmentTypesUrl(id),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getSpecialtyControllerListSpecialtyAppointmentTypesQueryKey = (
  id: number,
) => {
  return [`http://localhost:3001/specialty/${id}/appointment-types`] as const
}

export const getSpecialtyControllerListSpecialtyAppointmentTypesQueryOptions = <
  TData = Awaited<
    ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>
  >,
  TError = void,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>
      >,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSpecialtyControllerListSpecialtyAppointmentTypesQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>>
  > = ({ signal }) =>
    specialtyControllerListSpecialtyAppointmentTypes(id, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>
    >,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SpecialtyControllerListSpecialtyAppointmentTypesQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>>
  >
export type SpecialtyControllerListSpecialtyAppointmentTypesQueryError = void

/**
 * @summary Lists the specialty's available appointment types.
 */

export function useSpecialtyControllerListSpecialtyAppointmentTypes<
  TData = Awaited<
    ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>
  >,
  TError = void,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof specialtyControllerListSpecialtyAppointmentTypes>
      >,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getSpecialtyControllerListSpecialtyAppointmentTypesQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Lists the available specialties for each available provider type
 */
export type specialtyControllerListAvailableSpecialtiesResponse = {
  data: SpecialtyWithProviderResponseDto[]
  status: number
  headers: Headers
}

export const getSpecialtyControllerListAvailableSpecialtiesUrl = () => {
  return `http://localhost:3001/specialty`
}

export const specialtyControllerListAvailableSpecialties = async (
  options?: RequestInit,
): Promise<specialtyControllerListAvailableSpecialtiesResponse> => {
  const res = await fetch(getSpecialtyControllerListAvailableSpecialtiesUrl(), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getSpecialtyControllerListAvailableSpecialtiesQueryKey = () => {
  return [`http://localhost:3001/specialty`] as const
}

export const getSpecialtyControllerListAvailableSpecialtiesQueryOptions = <
  TData = Awaited<
    ReturnType<typeof specialtyControllerListAvailableSpecialties>
  >,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof specialtyControllerListAvailableSpecialties>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSpecialtyControllerListAvailableSpecialtiesQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialtyControllerListAvailableSpecialties>>
  > = ({ signal }) =>
    specialtyControllerListAvailableSpecialties({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof specialtyControllerListAvailableSpecialties>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SpecialtyControllerListAvailableSpecialtiesQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof specialtyControllerListAvailableSpecialties>>
  >
export type SpecialtyControllerListAvailableSpecialtiesQueryError = unknown

/**
 * @summary Lists the available specialties for each available provider type
 */

export function useSpecialtyControllerListAvailableSpecialties<
  TData = Awaited<
    ReturnType<typeof specialtyControllerListAvailableSpecialties>
  >,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof specialtyControllerListAvailableSpecialties>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getSpecialtyControllerListAvailableSpecialtiesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Lists the supported provider specialties
 */
export type specialtyControllerListByProviderTypeResponse = {
  data: SpecialtyWithProviderResponseDto[]
  status: number
  headers: Headers
}

export const getSpecialtyControllerListByProviderTypeUrl = (
  providerTypeId: number,
) => {
  return `http://localhost:3001/specialty/${providerTypeId}/specialties`
}

export const specialtyControllerListByProviderType = async (
  providerTypeId: number,
  options?: RequestInit,
): Promise<specialtyControllerListByProviderTypeResponse> => {
  const res = await fetch(
    getSpecialtyControllerListByProviderTypeUrl(providerTypeId),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getSpecialtyControllerListByProviderTypeQueryKey = (
  providerTypeId: number,
) => {
  return [
    `http://localhost:3001/specialty/${providerTypeId}/specialties`,
  ] as const
}

export const getSpecialtyControllerListByProviderTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof specialtyControllerListByProviderType>>,
  TError = void,
>(
  providerTypeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof specialtyControllerListByProviderType>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSpecialtyControllerListByProviderTypeQueryKey(providerTypeId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof specialtyControllerListByProviderType>>
  > = ({ signal }) =>
    specialtyControllerListByProviderType(providerTypeId, {
      signal,
      ...fetchOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!providerTypeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof specialtyControllerListByProviderType>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SpecialtyControllerListByProviderTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof specialtyControllerListByProviderType>>
>
export type SpecialtyControllerListByProviderTypeQueryError = void

/**
 * @summary Lists the supported provider specialties
 */

export function useSpecialtyControllerListByProviderType<
  TData = Awaited<ReturnType<typeof specialtyControllerListByProviderType>>,
  TError = void,
>(
  providerTypeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof specialtyControllerListByProviderType>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSpecialtyControllerListByProviderTypeQueryOptions(
    providerTypeId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
