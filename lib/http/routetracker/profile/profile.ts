/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  ErrorResponseDto,
  PatientProfileResponseDto,
  ProviderProfileResponseDto,
  UpdateIconResponseDto,
  UpdateUserProfileRequestDto,
  UserProfileResponseDto,
} from '.././types'

/**
 * @summary Returns the authenticated user profile with provider or user schema
 */
export type profileControllerGetProfileResponse = {
  data: UserProfileResponseDto
  status: number
  headers: Headers
}

export const getProfileControllerGetProfileUrl = () => {
  return `http://localhost:3001/profile/me`
}

export const profileControllerGetProfile = async (
  options?: RequestInit,
): Promise<profileControllerGetProfileResponse> => {
  const res = await fetch(getProfileControllerGetProfileUrl(), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getProfileControllerGetProfileQueryKey = () => {
  return [`http://localhost:3001/profile/me`] as const
}

export const getProfileControllerGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof profileControllerGetProfile>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof profileControllerGetProfile>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getProfileControllerGetProfileQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof profileControllerGetProfile>>
  > = ({ signal }) => profileControllerGetProfile({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof profileControllerGetProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProfileControllerGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof profileControllerGetProfile>>
>
export type ProfileControllerGetProfileQueryError = void

/**
 * @summary Returns the authenticated user profile with provider or user schema
 */

export function useProfileControllerGetProfile<
  TData = Awaited<ReturnType<typeof profileControllerGetProfile>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof profileControllerGetProfile>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProfileControllerGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Returns the updated authenticated user profile with provider or user schema
 */
export type profileControllerUpdateProfileResponse = {
  data: void
  status: number
  headers: Headers
}

export const getProfileControllerUpdateProfileUrl = () => {
  return `http://localhost:3001/profile/me`
}

export const profileControllerUpdateProfile = async (
  updateUserProfileRequestDto: UpdateUserProfileRequestDto,
  options?: RequestInit,
): Promise<profileControllerUpdateProfileResponse> => {
  const res = await fetch(getProfileControllerUpdateProfileUrl(), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateUserProfileRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getProfileControllerUpdateProfileMutationOptions = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileControllerUpdateProfile>>,
    TError,
    { data: UpdateUserProfileRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof profileControllerUpdateProfile>>,
  TError,
  { data: UpdateUserProfileRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof profileControllerUpdateProfile>>,
    { data: UpdateUserProfileRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return profileControllerUpdateProfile(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProfileControllerUpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof profileControllerUpdateProfile>>
>
export type ProfileControllerUpdateProfileMutationBody =
  UpdateUserProfileRequestDto
export type ProfileControllerUpdateProfileMutationError = ErrorResponseDto

/**
 * @summary Returns the updated authenticated user profile with provider or user schema
 */
export const useProfileControllerUpdateProfile = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileControllerUpdateProfile>>,
    TError,
    { data: UpdateUserProfileRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof profileControllerUpdateProfile>>,
  TError,
  { data: UpdateUserProfileRequestDto },
  TContext
> => {
  const mutationOptions =
    getProfileControllerUpdateProfileMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Returns the provider profile
 */
export type profileControllerGetProviderProfileResponse = {
  data: ProviderProfileResponseDto
  status: number
  headers: Headers
}

export const getProfileControllerGetProviderProfileUrl = (userId: number) => {
  return `http://localhost:3001/profile/provider/${userId}`
}

export const profileControllerGetProviderProfile = async (
  userId: number,
  options?: RequestInit,
): Promise<profileControllerGetProviderProfileResponse> => {
  const res = await fetch(getProfileControllerGetProviderProfileUrl(userId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getProfileControllerGetProviderProfileQueryKey = (
  userId: number,
) => {
  return [`http://localhost:3001/profile/provider/${userId}`] as const
}

export const getProfileControllerGetProviderProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof profileControllerGetProviderProfile>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof profileControllerGetProviderProfile>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getProfileControllerGetProviderProfileQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof profileControllerGetProviderProfile>>
  > = ({ signal }) =>
    profileControllerGetProviderProfile(userId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof profileControllerGetProviderProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProfileControllerGetProviderProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof profileControllerGetProviderProfile>>
>
export type ProfileControllerGetProviderProfileQueryError = ErrorResponseDto

/**
 * @summary Returns the provider profile
 */

export function useProfileControllerGetProviderProfile<
  TData = Awaited<ReturnType<typeof profileControllerGetProviderProfile>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof profileControllerGetProviderProfile>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProfileControllerGetProviderProfileQueryOptions(
    userId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Retrieves a patient profile
 */
export type profileControllerGetPatientProfileResponse = {
  data: PatientProfileResponseDto
  status: number
  headers: Headers
}

export const getProfileControllerGetPatientProfileUrl = (userId: number) => {
  return `http://localhost:3001/profile/patient/${userId}`
}

export const profileControllerGetPatientProfile = async (
  userId: number,
  options?: RequestInit,
): Promise<profileControllerGetPatientProfileResponse> => {
  const res = await fetch(getProfileControllerGetPatientProfileUrl(userId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getProfileControllerGetPatientProfileQueryKey = (
  userId: number,
) => {
  return [`http://localhost:3001/profile/patient/${userId}`] as const
}

export const getProfileControllerGetPatientProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof profileControllerGetPatientProfile>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof profileControllerGetPatientProfile>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getProfileControllerGetPatientProfileQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof profileControllerGetPatientProfile>>
  > = ({ signal }) =>
    profileControllerGetPatientProfile(userId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof profileControllerGetPatientProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProfileControllerGetPatientProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof profileControllerGetPatientProfile>>
>
export type ProfileControllerGetPatientProfileQueryError = ErrorResponseDto

/**
 * @summary Retrieves a patient profile
 */

export function useProfileControllerGetPatientProfile<
  TData = Awaited<ReturnType<typeof profileControllerGetPatientProfile>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof profileControllerGetPatientProfile>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProfileControllerGetPatientProfileQueryOptions(
    userId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Is expecting a image .jpg or .png called "file" in body using "multipart/form-data"
 * @summary Updates the avatar of a user
 */
export type profileControllerUploadIconResponse = {
  data: UpdateIconResponseDto
  status: number
  headers: Headers
}

export const getProfileControllerUploadIconUrl = () => {
  return `http://localhost:3001/profile/avatar`
}

export const profileControllerUploadIcon = async (
  options?: RequestInit,
): Promise<profileControllerUploadIconResponse> => {
  const res = await fetch(getProfileControllerUploadIconUrl(), {
    ...options,
    method: 'PUT',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getProfileControllerUploadIconMutationOptions = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileControllerUploadIcon>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof profileControllerUploadIcon>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof profileControllerUploadIcon>>,
    void
  > = () => {
    return profileControllerUploadIcon(fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProfileControllerUploadIconMutationResult = NonNullable<
  Awaited<ReturnType<typeof profileControllerUploadIcon>>
>

export type ProfileControllerUploadIconMutationError = ErrorResponseDto

/**
 * @summary Updates the avatar of a user
 */
export const useProfileControllerUploadIcon = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof profileControllerUploadIcon>>,
    TError,
    void,
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof profileControllerUploadIcon>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getProfileControllerUploadIconMutationOptions(options)

  return useMutation(mutationOptions)
}
