/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  LoginRequestDto,
  LoginResponseDto,
  RegisterPatientRequestDto,
  RegisterPatientResponseDto,
  RegisterProviderRequestDto,
  RegisterProviderResponseDto,
  SocialLoginRequestDto,
  SocialRegisterPatientRequestDto,
  SocialRegisterProviderRequestDto,
} from '.././types'

/**
 * @summary Sign-up a new provider with a single profession and possible specialties
 */
export type authControllerRegisterProviderResponse = {
  data: RegisterProviderResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerRegisterProviderUrl = () => {
  return `http://localhost:3001/auth/provider/register`
}

export const authControllerRegisterProvider = async (
  registerProviderRequestDto: RegisterProviderRequestDto,
  options?: RequestInit,
): Promise<authControllerRegisterProviderResponse> => {
  const res = await fetch(getAuthControllerRegisterProviderUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(registerProviderRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerRegisterProviderMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterProvider>>,
    TError,
    { data: RegisterProviderRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegisterProvider>>,
  TError,
  { data: RegisterProviderRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegisterProvider>>,
    { data: RegisterProviderRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerRegisterProvider(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerRegisterProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegisterProvider>>
>
export type AuthControllerRegisterProviderMutationBody =
  RegisterProviderRequestDto
export type AuthControllerRegisterProviderMutationError = void

/**
 * @summary Sign-up a new provider with a single profession and possible specialties
 */
export const useAuthControllerRegisterProvider = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterProvider>>,
    TError,
    { data: RegisterProviderRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegisterProvider>>,
  TError,
  { data: RegisterProviderRequestDto },
  TContext
> => {
  const mutationOptions =
    getAuthControllerRegisterProviderMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Registers a patient
 */
export type authControllerRegisterPatientResponse = {
  data: RegisterPatientResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerRegisterPatientUrl = () => {
  return `http://localhost:3001/auth/patient/register`
}

export const authControllerRegisterPatient = async (
  registerPatientRequestDto: RegisterPatientRequestDto,
  options?: RequestInit,
): Promise<authControllerRegisterPatientResponse> => {
  const res = await fetch(getAuthControllerRegisterPatientUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(registerPatientRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerRegisterPatientMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterPatient>>,
    TError,
    { data: RegisterPatientRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegisterPatient>>,
  TError,
  { data: RegisterPatientRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegisterPatient>>,
    { data: RegisterPatientRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerRegisterPatient(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerRegisterPatientMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegisterPatient>>
>
export type AuthControllerRegisterPatientMutationBody =
  RegisterPatientRequestDto
export type AuthControllerRegisterPatientMutationError = void

/**
 * @summary Registers a patient
 */
export const useAuthControllerRegisterPatient = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegisterPatient>>,
    TError,
    { data: RegisterPatientRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegisterPatient>>,
  TError,
  { data: RegisterPatientRequestDto },
  TContext
> => {
  const mutationOptions =
    getAuthControllerRegisterPatientMutationOptions(options)

  return useMutation(mutationOptions)
}
export type authControllerLoginResponse = {
  data: LoginResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerLoginUrl = () => {
  return `http://localhost:3001/auth/login`
}

export const authControllerLogin = async (
  loginRequestDto: LoginRequestDto,
  options?: RequestInit,
): Promise<authControllerLoginResponse> => {
  const res = await fetch(getAuthControllerLoginUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(loginRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerLoginMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerLogin(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>
export type AuthControllerLoginMutationBody = LoginRequestDto
export type AuthControllerLoginMutationError = void

export const useAuthControllerLogin = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Expect a Firebase ID Token and the remaining registration information in request body
 * @summary Sign-up a provider with social authentication
 */
export type authControllerSocialRegisterProviderResponse = {
  data: RegisterProviderResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerSocialRegisterProviderUrl = () => {
  return `http://localhost:3001/auth/social/provider/register`
}

export const authControllerSocialRegisterProvider = async (
  socialRegisterProviderRequestDto: SocialRegisterProviderRequestDto,
  options?: RequestInit,
): Promise<authControllerSocialRegisterProviderResponse> => {
  const res = await fetch(getAuthControllerSocialRegisterProviderUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(socialRegisterProviderRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerSocialRegisterProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>,
    TError,
    { data: SocialRegisterProviderRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>,
  TError,
  { data: SocialRegisterProviderRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>,
    { data: SocialRegisterProviderRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerSocialRegisterProvider(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerSocialRegisterProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>
>
export type AuthControllerSocialRegisterProviderMutationBody =
  SocialRegisterProviderRequestDto
export type AuthControllerSocialRegisterProviderMutationError = unknown

/**
 * @summary Sign-up a provider with social authentication
 */
export const useAuthControllerSocialRegisterProvider = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>,
    TError,
    { data: SocialRegisterProviderRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSocialRegisterProvider>>,
  TError,
  { data: SocialRegisterProviderRequestDto },
  TContext
> => {
  const mutationOptions =
    getAuthControllerSocialRegisterProviderMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Expect a Firebase ID Token and the remaining registration information in request body
 * @summary Sign-up a patient with social authentication
 */
export type authControllerSocialRegisterPatientResponse = {
  data: RegisterProviderResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerSocialRegisterPatientUrl = () => {
  return `http://localhost:3001/auth/social/patient/register`
}

export const authControllerSocialRegisterPatient = async (
  socialRegisterPatientRequestDto: SocialRegisterPatientRequestDto,
  options?: RequestInit,
): Promise<authControllerSocialRegisterPatientResponse> => {
  const res = await fetch(getAuthControllerSocialRegisterPatientUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(socialRegisterPatientRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerSocialRegisterPatientMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>,
    TError,
    { data: SocialRegisterPatientRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>,
  TError,
  { data: SocialRegisterPatientRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>,
    { data: SocialRegisterPatientRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerSocialRegisterPatient(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerSocialRegisterPatientMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>
>
export type AuthControllerSocialRegisterPatientMutationBody =
  SocialRegisterPatientRequestDto
export type AuthControllerSocialRegisterPatientMutationError = unknown

/**
 * @summary Sign-up a patient with social authentication
 */
export const useAuthControllerSocialRegisterPatient = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>,
    TError,
    { data: SocialRegisterPatientRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSocialRegisterPatient>>,
  TError,
  { data: SocialRegisterPatientRequestDto },
  TContext
> => {
  const mutationOptions =
    getAuthControllerSocialRegisterPatientMutationOptions(options)

  return useMutation(mutationOptions)
}
export type authControllerSocialLoginResponse = {
  data: LoginResponseDto
  status: number
  headers: Headers
}

export const getAuthControllerSocialLoginUrl = () => {
  return `http://localhost:3001/auth/social/login`
}

export const authControllerSocialLogin = async (
  socialLoginRequestDto: SocialLoginRequestDto,
  options?: RequestInit,
): Promise<authControllerSocialLoginResponse> => {
  const res = await fetch(getAuthControllerSocialLoginUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(socialLoginRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerSocialLoginMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialLogin>>,
    TError,
    { data: SocialLoginRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSocialLogin>>,
  TError,
  { data: SocialLoginRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSocialLogin>>,
    { data: SocialLoginRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerSocialLogin(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerSocialLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSocialLogin>>
>
export type AuthControllerSocialLoginMutationBody = SocialLoginRequestDto
export type AuthControllerSocialLoginMutationError = void

export const useAuthControllerSocialLogin = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSocialLogin>>,
    TError,
    { data: SocialLoginRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSocialLogin>>,
  TError,
  { data: SocialLoginRequestDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSocialLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
export type authControllerProtectedRouteResponse = {
  data: void
  status: number
  headers: Headers
}

export const getAuthControllerProtectedRouteUrl = () => {
  return `http://localhost:3001/auth/protected`
}

export const authControllerProtectedRoute = async (
  options?: RequestInit,
): Promise<authControllerProtectedRouteResponse> => {
  const res = await fetch(getAuthControllerProtectedRouteUrl(), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAuthControllerProtectedRouteQueryKey = () => {
  return [`http://localhost:3001/auth/protected`] as const
}

export const getAuthControllerProtectedRouteQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerProtectedRoute>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProtectedRoute>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerProtectedRouteQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerProtectedRoute>>
  > = ({ signal }) => authControllerProtectedRoute({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProtectedRoute>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AuthControllerProtectedRouteQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerProtectedRoute>>
>
export type AuthControllerProtectedRouteQueryError = unknown

export function useAuthControllerProtectedRoute<
  TData = Awaited<ReturnType<typeof authControllerProtectedRoute>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerProtectedRoute>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerProtectedRouteQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
