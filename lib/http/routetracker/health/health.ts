/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  HealthControllerCheck200,
  HealthControllerCheck503,
} from '.././types'

export type healthControllerCheckResponse = {
  data: HealthControllerCheck200
  status: number
  headers: Headers
}

export const getHealthControllerCheckUrl = () => {
  return `http://localhost:3001/health`
}

export const healthControllerCheck = async (
  options?: RequestInit,
): Promise<healthControllerCheckResponse> => {
  const res = await fetch(getHealthControllerCheckUrl(), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getHealthControllerCheckQueryKey = () => {
  return [`http://localhost:3001/health`] as const
}

export const getHealthControllerCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = HealthControllerCheck503,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof healthControllerCheck>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getHealthControllerCheckQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof healthControllerCheck>>
  > = ({ signal }) => healthControllerCheck({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthControllerCheck>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type HealthControllerCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthControllerCheck>>
>
export type HealthControllerCheckQueryError = HealthControllerCheck503

export function useHealthControllerCheck<
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = HealthControllerCheck503,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof healthControllerCheck>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHealthControllerCheckQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
