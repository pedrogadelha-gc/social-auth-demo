/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  AvailabilityControllerFindAvailableSlotsByProviderParams,
  AvailabilityControllerSearchAvailableProviderParams,
  ProviderAvailabilityResponseDto,
  ScheduleAvailabilityResponseDto,
} from '.././types'

export type availabilityControllerSearchAvailableProviderResponse = {
  data: ScheduleAvailabilityResponseDto[]
  status: number
  headers: Headers
}

export const getAvailabilityControllerSearchAvailableProviderUrl = (
  params: AvailabilityControllerSearchAvailableProviderParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `http://localhost:3001/availability/available-provider?${normalizedParams.toString()}`
    : `http://localhost:3001/availability/available-provider`
}

export const availabilityControllerSearchAvailableProvider = async (
  params: AvailabilityControllerSearchAvailableProviderParams,
  options?: RequestInit,
): Promise<availabilityControllerSearchAvailableProviderResponse> => {
  const res = await fetch(
    getAvailabilityControllerSearchAvailableProviderUrl(params),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAvailabilityControllerSearchAvailableProviderQueryKey = (
  params: AvailabilityControllerSearchAvailableProviderParams,
) => {
  return [
    `http://localhost:3001/availability/available-provider`,
    ...(params ? [params] : []),
  ] as const
}

export const getAvailabilityControllerSearchAvailableProviderQueryOptions = <
  TData = Awaited<
    ReturnType<typeof availabilityControllerSearchAvailableProvider>
  >,
  TError = unknown,
>(
  params: AvailabilityControllerSearchAvailableProviderParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof availabilityControllerSearchAvailableProvider>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAvailabilityControllerSearchAvailableProviderQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof availabilityControllerSearchAvailableProvider>>
  > = ({ signal }) =>
    availabilityControllerSearchAvailableProvider(params, {
      signal,
      ...fetchOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof availabilityControllerSearchAvailableProvider>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AvailabilityControllerSearchAvailableProviderQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof availabilityControllerSearchAvailableProvider>>
  >
export type AvailabilityControllerSearchAvailableProviderQueryError = unknown

export function useAvailabilityControllerSearchAvailableProvider<
  TData = Awaited<
    ReturnType<typeof availabilityControllerSearchAvailableProvider>
  >,
  TError = unknown,
>(
  params: AvailabilityControllerSearchAvailableProviderParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof availabilityControllerSearchAvailableProvider>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getAvailabilityControllerSearchAvailableProviderQueryOptions(
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export type availabilityControllerFindAvailableSlotsByProviderResponse = {
  data: ProviderAvailabilityResponseDto
  status: number
  headers: Headers
}

export const getAvailabilityControllerFindAvailableSlotsByProviderUrl = (
  userId: number,
  params: AvailabilityControllerFindAvailableSlotsByProviderParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `http://localhost:3001/availability/available-provider/${userId}?${normalizedParams.toString()}`
    : `http://localhost:3001/availability/available-provider/${userId}`
}

export const availabilityControllerFindAvailableSlotsByProvider = async (
  userId: number,
  params: AvailabilityControllerFindAvailableSlotsByProviderParams,
  options?: RequestInit,
): Promise<availabilityControllerFindAvailableSlotsByProviderResponse> => {
  const res = await fetch(
    getAvailabilityControllerFindAvailableSlotsByProviderUrl(userId, params),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAvailabilityControllerFindAvailableSlotsByProviderQueryKey = (
  userId: number,
  params: AvailabilityControllerFindAvailableSlotsByProviderParams,
) => {
  return [
    `http://localhost:3001/availability/available-provider/${userId}`,
    ...(params ? [params] : []),
  ] as const
}

export const getAvailabilityControllerFindAvailableSlotsByProviderQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
    >,
    TError = unknown,
  >(
    userId: number,
    params: AvailabilityControllerFindAvailableSlotsByProviderParams,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
        >,
        TError,
        TData
      >
      fetch?: RequestInit
    },
  ) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getAvailabilityControllerFindAvailableSlotsByProviderQueryKey(
        userId,
        params,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
      >
    > = ({ signal }) =>
      availabilityControllerFindAvailableSlotsByProvider(userId, params, {
        signal,
        ...fetchOptions,
      })

    return {
      queryKey,
      queryFn,
      enabled: !!userId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
      >,
      TError,
      TData
    > & { queryKey: QueryKey }
  }

export type AvailabilityControllerFindAvailableSlotsByProviderQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
    >
  >
export type AvailabilityControllerFindAvailableSlotsByProviderQueryError =
  unknown

export function useAvailabilityControllerFindAvailableSlotsByProvider<
  TData = Awaited<
    ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
  >,
  TError = unknown,
>(
  userId: number,
  params: AvailabilityControllerFindAvailableSlotsByProviderParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof availabilityControllerFindAvailableSlotsByProvider>
      >,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getAvailabilityControllerFindAvailableSlotsByProviderQueryOptions(
      userId,
      params,
      options,
    )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
