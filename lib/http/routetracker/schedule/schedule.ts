/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  CreateScheduleRequestDto,
  CreateScheduleResponseDto,
  ErrorResponseDto,
  FindScheduleResponseDto,
  UpdateScheduleRequestDto,
  UpdateScheduleResponseDto,
} from '.././types'

/**
 * @summary Get schedules by user ID
 */
export type scheduleControllerGetSchedulesResponse = {
  data: FindScheduleResponseDto[]
  status: number
  headers: Headers
}

export const getScheduleControllerGetSchedulesUrl = (userId: number) => {
  return `http://localhost:3001/schedule/${userId}`
}

export const scheduleControllerGetSchedules = async (
  userId: number,
  options?: RequestInit,
): Promise<scheduleControllerGetSchedulesResponse> => {
  const res = await fetch(getScheduleControllerGetSchedulesUrl(userId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getScheduleControllerGetSchedulesQueryKey = (userId: number) => {
  return [`http://localhost:3001/schedule/${userId}`] as const
}

export const getScheduleControllerGetSchedulesQueryOptions = <
  TData = Awaited<ReturnType<typeof scheduleControllerGetSchedules>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof scheduleControllerGetSchedules>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getScheduleControllerGetSchedulesQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof scheduleControllerGetSchedules>>
  > = ({ signal }) =>
    scheduleControllerGetSchedules(userId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof scheduleControllerGetSchedules>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ScheduleControllerGetSchedulesQueryResult = NonNullable<
  Awaited<ReturnType<typeof scheduleControllerGetSchedules>>
>
export type ScheduleControllerGetSchedulesQueryError = ErrorResponseDto

/**
 * @summary Get schedules by user ID
 */

export function useScheduleControllerGetSchedules<
  TData = Awaited<ReturnType<typeof scheduleControllerGetSchedules>>,
  TError = ErrorResponseDto,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof scheduleControllerGetSchedules>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getScheduleControllerGetSchedulesQueryOptions(
    userId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Creates a new schedule with availability slots for a provider and specialty
 */
export type scheduleControllerCreateScheduleResponse = {
  data: CreateScheduleResponseDto
  status: number
  headers: Headers
}

export const getScheduleControllerCreateScheduleUrl = () => {
  return `http://localhost:3001/schedule`
}

export const scheduleControllerCreateSchedule = async (
  createScheduleRequestDto: CreateScheduleRequestDto,
  options?: RequestInit,
): Promise<scheduleControllerCreateScheduleResponse> => {
  const res = await fetch(getScheduleControllerCreateScheduleUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createScheduleRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getScheduleControllerCreateScheduleMutationOptions = <
  TError = ErrorResponseDto | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>,
    TError,
    { data: CreateScheduleRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>,
  TError,
  { data: CreateScheduleRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>,
    { data: CreateScheduleRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return scheduleControllerCreateSchedule(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScheduleControllerCreateScheduleMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>
>
export type ScheduleControllerCreateScheduleMutationBody =
  CreateScheduleRequestDto
export type ScheduleControllerCreateScheduleMutationError =
  ErrorResponseDto | void

/**
 * @summary Creates a new schedule with availability slots for a provider and specialty
 */
export const useScheduleControllerCreateSchedule = <
  TError = ErrorResponseDto | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>,
    TError,
    { data: CreateScheduleRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof scheduleControllerCreateSchedule>>,
  TError,
  { data: CreateScheduleRequestDto },
  TContext
> => {
  const mutationOptions =
    getScheduleControllerCreateScheduleMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Returns a schedule by id
 */
export type scheduleControllerFindByIdResponse = {
  data: FindScheduleResponseDto
  status: number
  headers: Headers
}

export const getScheduleControllerFindByIdUrl = (scheduleId: number) => {
  return `http://localhost:3001/schedule/find/${scheduleId}`
}

export const scheduleControllerFindById = async (
  scheduleId: number,
  options?: RequestInit,
): Promise<scheduleControllerFindByIdResponse> => {
  const res = await fetch(getScheduleControllerFindByIdUrl(scheduleId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getScheduleControllerFindByIdQueryKey = (scheduleId: number) => {
  return [`http://localhost:3001/schedule/find/${scheduleId}`] as const
}

export const getScheduleControllerFindByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof scheduleControllerFindById>>,
  TError = ErrorResponseDto | void,
>(
  scheduleId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof scheduleControllerFindById>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getScheduleControllerFindByIdQueryKey(scheduleId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof scheduleControllerFindById>>
  > = ({ signal }) =>
    scheduleControllerFindById(scheduleId, { signal, ...fetchOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!scheduleId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof scheduleControllerFindById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ScheduleControllerFindByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof scheduleControllerFindById>>
>
export type ScheduleControllerFindByIdQueryError = ErrorResponseDto | void

/**
 * @summary Returns a schedule by id
 */

export function useScheduleControllerFindById<
  TData = Awaited<ReturnType<typeof scheduleControllerFindById>>,
  TError = ErrorResponseDto | void,
>(
  scheduleId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof scheduleControllerFindById>>,
      TError,
      TData
    >
    fetch?: RequestInit
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getScheduleControllerFindByIdQueryOptions(
    scheduleId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Intervals must be provided intirely, the old availability set will be deleted.
 * @summary Update schedule details and overwrite invervals
 */
export type scheduleControllerUpdateResponse = {
  data: UpdateScheduleResponseDto
  status: number
  headers: Headers
}

export const getScheduleControllerUpdateUrl = (scheduleId: number) => {
  return `http://localhost:3001/schedule/${scheduleId}`
}

export const scheduleControllerUpdate = async (
  scheduleId: number,
  updateScheduleRequestDto: UpdateScheduleRequestDto,
  options?: RequestInit,
): Promise<scheduleControllerUpdateResponse> => {
  const res = await fetch(getScheduleControllerUpdateUrl(scheduleId), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateScheduleRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getScheduleControllerUpdateMutationOptions = <
  TError = ErrorResponseDto | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerUpdate>>,
    TError,
    { scheduleId: number; data: UpdateScheduleRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleControllerUpdate>>,
  TError,
  { scheduleId: number; data: UpdateScheduleRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleControllerUpdate>>,
    { scheduleId: number; data: UpdateScheduleRequestDto }
  > = (props) => {
    const { scheduleId, data } = props ?? {}

    return scheduleControllerUpdate(scheduleId, data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScheduleControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleControllerUpdate>>
>
export type ScheduleControllerUpdateMutationBody = UpdateScheduleRequestDto
export type ScheduleControllerUpdateMutationError = ErrorResponseDto | void

/**
 * @summary Update schedule details and overwrite invervals
 */
export const useScheduleControllerUpdate = <
  TError = ErrorResponseDto | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerUpdate>>,
    TError,
    { scheduleId: number; data: UpdateScheduleRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof scheduleControllerUpdate>>,
  TError,
  { scheduleId: number; data: UpdateScheduleRequestDto },
  TContext
> => {
  const mutationOptions = getScheduleControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
export type scheduleControllerDeleteResponse = {
  data: void
  status: number
  headers: Headers
}

export const getScheduleControllerDeleteUrl = (id: number) => {
  return `http://localhost:3001/schedule/${id}`
}

export const scheduleControllerDelete = async (
  id: number,
  options?: RequestInit,
): Promise<scheduleControllerDeleteResponse> => {
  const res = await fetch(getScheduleControllerDeleteUrl(id), {
    ...options,
    method: 'DELETE',
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getScheduleControllerDeleteMutationOptions = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerDelete>>,
    TError,
    { id: number },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleControllerDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return scheduleControllerDelete(id, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ScheduleControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleControllerDelete>>
>

export type ScheduleControllerDeleteMutationError = ErrorResponseDto

export const useScheduleControllerDelete = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleControllerDelete>>,
    TError,
    { id: number },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof scheduleControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getScheduleControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
