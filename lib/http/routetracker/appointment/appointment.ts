/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Vexis API
 * API for VexisApp
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  CreateAppointmentRequestDto,
  CreateAppointmentResponseDto,
  ErrorResponseDto,
  PatientAppointmentResponseDto,
  ProviderAppointmentResponseDto,
} from '.././types'

export type appointmentControllerCreateResponse = {
  data: CreateAppointmentResponseDto
  status: number
  headers: Headers
}

export const getAppointmentControllerCreateUrl = () => {
  return `http://localhost:3001/appointment`
}

export const appointmentControllerCreate = async (
  createAppointmentRequestDto: CreateAppointmentRequestDto,
  options?: RequestInit,
): Promise<appointmentControllerCreateResponse> => {
  const res = await fetch(getAppointmentControllerCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAppointmentRequestDto),
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAppointmentControllerCreateMutationOptions = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof appointmentControllerCreate>>,
    TError,
    { data: CreateAppointmentRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof appointmentControllerCreate>>,
  TError,
  { data: CreateAppointmentRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof appointmentControllerCreate>>,
    { data: CreateAppointmentRequestDto }
  > = (props) => {
    const { data } = props ?? {}

    return appointmentControllerCreate(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppointmentControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof appointmentControllerCreate>>
>
export type AppointmentControllerCreateMutationBody =
  CreateAppointmentRequestDto
export type AppointmentControllerCreateMutationError = ErrorResponseDto

export const useAppointmentControllerCreate = <
  TError = ErrorResponseDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof appointmentControllerCreate>>,
    TError,
    { data: CreateAppointmentRequestDto },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof appointmentControllerCreate>>,
  TError,
  { data: CreateAppointmentRequestDto },
  TContext
> => {
  const mutationOptions = getAppointmentControllerCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
export type appointmentControllerListProviderAppointmentsResponse = {
  data: ProviderAppointmentResponseDto[]
  status: number
  headers: Headers
}

export const getAppointmentControllerListProviderAppointmentsUrl = () => {
  return `http://localhost:3001/appointment/provider/me`
}

export const appointmentControllerListProviderAppointments = async (
  options?: RequestInit,
): Promise<appointmentControllerListProviderAppointmentsResponse> => {
  const res = await fetch(
    getAppointmentControllerListProviderAppointmentsUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAppointmentControllerListProviderAppointmentsQueryKey = () => {
  return [`http://localhost:3001/appointment/provider/me`] as const
}

export const getAppointmentControllerListProviderAppointmentsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof appointmentControllerListProviderAppointments>
  >,
  TError = ErrorResponseDto,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListProviderAppointments>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAppointmentControllerListProviderAppointmentsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appointmentControllerListProviderAppointments>>
  > = ({ signal }) =>
    appointmentControllerListProviderAppointments({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListProviderAppointments>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppointmentControllerListProviderAppointmentsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof appointmentControllerListProviderAppointments>>
  >
export type AppointmentControllerListProviderAppointmentsQueryError =
  ErrorResponseDto

export function useAppointmentControllerListProviderAppointments<
  TData = Awaited<
    ReturnType<typeof appointmentControllerListProviderAppointments>
  >,
  TError = ErrorResponseDto,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListProviderAppointments>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getAppointmentControllerListProviderAppointmentsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export type appointmentControllerListPatientAppointmentsResponse = {
  data: PatientAppointmentResponseDto[]
  status: number
  headers: Headers
}

export const getAppointmentControllerListPatientAppointmentsUrl = () => {
  return `http://localhost:3001/appointment/patient/me`
}

export const appointmentControllerListPatientAppointments = async (
  options?: RequestInit,
): Promise<appointmentControllerListPatientAppointmentsResponse> => {
  const res = await fetch(
    getAppointmentControllerListPatientAppointmentsUrl(),
    {
      ...options,
      method: 'GET',
    },
  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getAppointmentControllerListPatientAppointmentsQueryKey = () => {
  return [`http://localhost:3001/appointment/patient/me`] as const
}

export const getAppointmentControllerListPatientAppointmentsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof appointmentControllerListPatientAppointments>
  >,
  TError = ErrorResponseDto,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListPatientAppointments>>,
    TError,
    TData
  >
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAppointmentControllerListPatientAppointmentsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appointmentControllerListPatientAppointments>>
  > = ({ signal }) =>
    appointmentControllerListPatientAppointments({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListPatientAppointments>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppointmentControllerListPatientAppointmentsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof appointmentControllerListPatientAppointments>>
  >
export type AppointmentControllerListPatientAppointmentsQueryError =
  ErrorResponseDto

export function useAppointmentControllerListPatientAppointments<
  TData = Awaited<
    ReturnType<typeof appointmentControllerListPatientAppointments>
  >,
  TError = ErrorResponseDto,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appointmentControllerListPatientAppointments>>,
    TError,
    TData
  >
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getAppointmentControllerListPatientAppointmentsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
